{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"project:/contracts/MetreonReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport {Data} from \"./libraries/Data.sol\";\r\nimport {IMessageReceiver} from \"./interfaces/IMessageReceiver.sol\";\r\nimport {IMetreonConfig} from \"./interfaces/IMetreonConfig.sol\";\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\nabstract contract MetreonReceiver is IMessageReceiver, Context, Ownable {\r\n    address private immutable _metreon;\r\n    IMetreonConfig private _config;\r\n\r\n    constructor(address config_, address metreon_) Ownable() {\r\n        if (metreon_ == address(0)) revert InvalidRouter(address(0));\r\n        _metreon = metreon_;\r\n        _config = IMetreonConfig(config_);\r\n    }\r\n\r\n    function metreonReceive(\r\n        Data.IncomingMessage calldata message\r\n    ) external virtual override onlyMetreon {\r\n        Data.IncomingMessage memory updatedMessage = message;\r\n\r\n        for (uint256 index = 0; index < updatedMessage.tokens.length; index++) {\r\n            updatedMessage.tokens[index] = Data.Token({\r\n                tokenId: _config.getChainTokenId(\r\n                    message.fromChainId,\r\n                    message.tokens[index].tokenId\r\n                ),\r\n                amount: message.tokens[index].amount\r\n            });\r\n        }\r\n\r\n        _metreonReceive(updatedMessage);\r\n    }\r\n\r\n    function _metreonReceive(\r\n        Data.IncomingMessage memory message\r\n    ) internal virtual;\r\n\r\n    function getMetreon() public view override returns (address) {\r\n        return _metreon;\r\n    }\r\n\r\n    error InvalidRouter(address router);\r\n\r\n    modifier onlyMetreon() {\r\n        if (_metreon != _msgSender()) revert InvalidRouter(_msgSender());\r\n        _;\r\n    }\r\n}\r\n"},"project:/contracts/interfaces/IMessageReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport {Data} from \"../libraries/Data.sol\";\r\n\r\ninterface IMessageReceiver {\r\n    function metreonReceive(Data.IncomingMessage calldata message) external;\r\n\r\n    function getMetreon() external view returns (address);\r\n}\r\n"},"project:/contracts/interfaces/IMetreon.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport {Data} from \"../libraries/Data.sol\";\r\n\r\ninterface IMetreon {\r\n    error UnsupportedChain(uint256 chainId);\r\n    error InsufficientGasFee();\r\n    error InvalidMessage();\r\n    error AlreadyExecuted(bytes32 messageId);\r\n\r\n    event Dispatch(\r\n        bytes32 messageId,\r\n        uint256 fee,\r\n        address feeToken,\r\n        uint256 sequenceNumber,\r\n        uint256 toChainId,\r\n        address sender,\r\n        address receiver,\r\n        Data.Token[] tokens,\r\n        bytes payload\r\n    );\r\n\r\n    event PostMessage(bytes32 messageId);\r\n\r\n    function isChainSupported(uint256 chainId) external view returns (bool);\r\n\r\n    function isTokenSupported(address tokenId) external view returns (bool);\r\n\r\n    function estimateFee(uint256 toChainId) external view returns (uint256);\r\n\r\n    function sendMessage(\r\n        Data.OutgoingMessage calldata message,\r\n        address tokenPool\r\n    ) external payable returns (bytes32);\r\n\r\n    function postMessage(\r\n        address receiver,\r\n        Data.IncomingMessage calldata message,\r\n        address tokenPool\r\n    ) external;\r\n}\r\n"},"project:/contracts/interfaces/IMetreonConfig.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IMetreonConfig {\r\n    event SetFee(uint256 toChainId, uint256 amount);\r\n    event SupportedChains(uint256[] chains);\r\n    event SupportedTokens(address[] chains);\r\n    event SetChainTokenId(\r\n        uint256 chainId,\r\n        address tokenId,\r\n        address chainTokenId\r\n    );\r\n\r\n    error InvalidAmount(uint256 amount);\r\n    error InvalidChainId(uint256 chainId);\r\n\r\n    function getChainTokenId(\r\n        uint256 chainId,\r\n        address tokenId\r\n    ) external view returns (address);\r\n\r\n    function setChainTokenId(\r\n        uint256 chainId,\r\n        address tokenId,\r\n        address chainToken\r\n    ) external;\r\n\r\n    function getFee(uint256 toChainId) external view returns (uint256);\r\n\r\n    function setFee(uint256 toChainId, uint256 amount) external;\r\n\r\n    function supportedChains() external view returns (uint256[] memory);\r\n\r\n    function supportedTokens() external view returns (address[] memory);\r\n\r\n    function updateSupportedChains(uint256[] memory chains) external;\r\n\r\n    function updateSupportedTokens(address[] memory chains) external;\r\n}\r\n"},"project:/contracts/libraries/Data.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nlibrary Data {\r\n    struct Token {\r\n        address tokenId;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct IncomingMessage {\r\n        bytes32 messageId;\r\n        uint256 fromChainId;\r\n        address sender;\r\n        bytes payload;\r\n        Token[] tokens;\r\n    }\r\n\r\n    struct OutgoingMessage {\r\n        uint256 toChainId;\r\n        address receiver;\r\n        bytes payload;\r\n        Token[] tokens;\r\n    }\r\n}\r\n"},"project:/contracts/samples/SimpleMsg.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport {Data} from \"../libraries/Data.sol\";\r\nimport {IMetreon} from \"../interfaces/IMetreon.sol\";\r\nimport {MetreonReceiver} from \"../MetreonReceiver.sol\";\r\n\r\n/// @title SimpleMsg - Sending cross chain messages\r\n/// @author devarogundade\r\ncontract SimpleMsg is MetreonReceiver {\r\n    IMetreon private _metreon;\r\n\r\n    // Keeps track of other network destination contracts\r\n    mapping(uint256 => address) public _contracts;\r\n\r\n    // Events\r\n    event NewMessage(address sender, address receiver, string text);\r\n\r\n    // Testnet contracts - https://docs.metreon.xyz/developers/testnet\r\n\r\n    constructor(\r\n        address config_,\r\n        address metreon_\r\n    ) MetreonReceiver(config_, metreon_) {\r\n        // Initialize metreon contract\r\n        _metreon = IMetreon(getMetreon());\r\n    }\r\n\r\n    function setContract(uint256 chainId, address contractId) external {\r\n        _contracts[chainId] = contractId;\r\n    }\r\n\r\n    function sendMessage(\r\n        uint256 toChainId,\r\n        string memory text,\r\n        address receiver\r\n    ) external payable returns (bytes32) {\r\n        // Build a cross chain message\r\n        Data.OutgoingMessage memory message = Data.OutgoingMessage({\r\n            toChainId: toChainId,\r\n            receiver: _contracts[toChainId],\r\n            payload: abi.encode(_msgSender(), text, receiver),\r\n            tokens: new Data.Token[](0)\r\n        });\r\n\r\n        // Calculate a cross chain message fee\r\n        uint256 fee = _metreon.estimateFee(toChainId);\r\n\r\n        require(msg.value >= fee, \"Insuficient fee supplied\");\r\n\r\n        // Send a cross chain message\r\n        return _metreon.sendMessage{value: fee}(message, address(0));\r\n    }\r\n\r\n    // Receive a cross chain message\r\n    function _metreonReceive(\r\n        Data.IncomingMessage memory message\r\n    ) internal override {\r\n        (address sender, string memory text, address receiver) = abi.decode(\r\n            message.payload,\r\n            (address, string, address)\r\n        );\r\n\r\n        emit NewMessage(sender, receiver, text);\r\n    }\r\n}\r\n"}},"settings":{"remappings":[],"optimizer":{"enabled":true,"runs":200},"evmVersion":"byzantium"}}