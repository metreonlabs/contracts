{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"project:/contracts/MetreonConfig.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport {IMetreonConfig} from \"./interfaces/IMetreonConfig.sol\";\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract MetreonConfig is IMetreonConfig, Ownable {\r\n    mapping(uint256 => uint256) private _fees;\r\n    mapping(uint256 => mapping(address => address)) private _tokens;\r\n\r\n    uint256[] private _supportedChains;\r\n    address[] private _supportedTokens;\r\n\r\n    constructor() Ownable() {}\r\n\r\n    function getChainTokenId(\r\n        uint256 chainId,\r\n        address tokenId\r\n    ) external view override returns (address) {\r\n        return _tokens[chainId][tokenId];\r\n    }\r\n\r\n    function setChainTokenId(\r\n        uint256 chainId,\r\n        address tokenId,\r\n        address chainTokenId\r\n    ) external override onlyOwner {\r\n        _tokens[chainId][tokenId] = chainTokenId;\r\n\r\n        emit SetChainTokenId(chainId, tokenId, chainTokenId);\r\n    }\r\n\r\n    function getFee(\r\n        uint256 toChainId\r\n    ) external view override returns (uint256) {\r\n        return _fees[toChainId];\r\n    }\r\n\r\n    function setFee(\r\n        uint256 toChainId,\r\n        uint256 amount\r\n    ) external override onlyOwner {\r\n        if (amount == 0) revert InvalidAmount(amount);\r\n        if (toChainId == 0) revert InvalidChainId(toChainId);\r\n\r\n        _fees[toChainId] = amount;\r\n\r\n        emit SetFee(toChainId, amount);\r\n    }\r\n\r\n    function supportedChains() external view returns (uint256[] memory) {\r\n        return _supportedChains;\r\n    }\r\n\r\n    function updateSupportedChains(uint256[] memory chains) external onlyOwner {\r\n        _supportedChains = chains;\r\n\r\n        emit SupportedChains(chains);\r\n    }\r\n\r\n    function supportedTokens() external view returns (address[] memory) {\r\n        return _supportedTokens;\r\n    }\r\n\r\n    function updateSupportedTokens(address[] memory tokens) external onlyOwner {\r\n        _supportedTokens = tokens;\r\n\r\n        emit SupportedTokens(tokens);\r\n    }\r\n}\r\n"},"project:/contracts/interfaces/IMetreonConfig.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IMetreonConfig {\r\n    event SetFee(uint256 toChainId, uint256 amount);\r\n    event SupportedChains(uint256[] chains);\r\n    event SupportedTokens(address[] chains);\r\n    event SetChainTokenId(\r\n        uint256 chainId,\r\n        address tokenId,\r\n        address chainTokenId\r\n    );\r\n\r\n    error InvalidAmount(uint256 amount);\r\n    error InvalidChainId(uint256 chainId);\r\n\r\n    function getChainTokenId(\r\n        uint256 chainId,\r\n        address tokenId\r\n    ) external view returns (address);\r\n\r\n    function setChainTokenId(\r\n        uint256 chainId,\r\n        address tokenId,\r\n        address chainToken\r\n    ) external;\r\n\r\n    function getFee(uint256 toChainId) external view returns (uint256);\r\n\r\n    function setFee(uint256 toChainId, uint256 amount) external;\r\n\r\n    function supportedChains() external view returns (uint256[] memory);\r\n\r\n    function supportedTokens() external view returns (address[] memory);\r\n\r\n    function updateSupportedChains(uint256[] memory chains) external;\r\n\r\n    function updateSupportedTokens(address[] memory chains) external;\r\n}\r\n"}},"settings":{"remappings":[],"optimizer":{"enabled":true,"runs":200},"evmVersion":"byzantium"}}